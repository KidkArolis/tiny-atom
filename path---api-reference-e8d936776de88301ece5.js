webpackJsonp([0x7202e5ab0a27],{506:function(e,t){e.exports={data:{markdownRemark:{html:'<h3 id="createatominitialstate-evolve-render-options"><a href="#createatominitialstate-evolve-render-options" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>createAtom(initialState, evolve, render, options)</code></h3>\n<p>Create an atom.</p>\n<ul>\n<li><code>initialState</code> - defaults to <code>{}</code></li>\n<li>\n<p><code>evolve(get, split, action)</code> - receives actions and controls the evolution of the state</p>\n<ul>\n<li><code>get()</code> - get current state – see <code>atom.get</code></li>\n<li><code>split(update)</code> or <code>split(type, payload)</code> – see <code>atom.split</code></li>\n<li><code>action</code> - an object of shape <code>{ type, payload }</code></li>\n</ul>\n</li>\n<li><code>render(atom)</code> - called on each state update</li>\n</ul>\n<p>Available options:</p>\n<ul>\n<li><code>options.debug(info)</code> - called on each <code>action</code> and <code>update</code> with info object of shape <code>{ type, atom, action, sourceActions, prevState }</code></li>\n<li><code>options.merge(state, update)</code> - called each time <code>split(update)</code> is called. Default implementation is <code>(state, update) => Object.assign({}, state, update)</code>. You can use this hook to use a different data structure for your state, such as Immutable. Or you could use it to extend the state instead of cloning with <code>Object.assign(state, update)</code> if that makes performance or architectural difference.</li>\n</ul>\n<h3 id="atomget"><a href="#atomget" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>atom.get</code></h3>\n<p>Get current state.</p>\n<h3 id="atomsplit"><a href="#atomsplit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>atom.split</code></h3>\n<p>Can be used in 2 ways:</p>\n<ul>\n<li><code>atom.split(type, payload)</code> - send an action to <code>evolve</code>.</li>\n<li><code>atom.split(update)</code> - update the state with the <code>update</code> object, doesn’t go via <code>evolve</code>.</li>\n</ul>',excerpt:"createAtom(initialState, evolve, render, options) Create an atom. initialState  - defaults to  {} evolve(get, split, action)  - receives…",timeToRead:1,frontmatter:{title:"API reference"},parent:{__typename:"File",relativePath:"api-reference.md"}}},pathContext:{slug:"/api-reference/"}}}});
//# sourceMappingURL=path---api-reference-e8d936776de88301ece5.js.map