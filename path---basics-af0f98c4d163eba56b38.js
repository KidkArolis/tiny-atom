webpackJsonp([0x846f7709830f],{508:function(n,s){n.exports={data:{markdownRemark:{html:'<p>This is a guide explaining how to think in Tiny Atom.</p>\n<p>This guide does not assume any previous understanding of state management approaches in JavaScript. If you are an experienced developer, you might want to also read <a href="/alternatives">Alternatives</a> or usage guides.</p>\n<h3 id="example"><a href="#example" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> createAtom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tiny-atom\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token function">createAtom</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> evolve<span class="token punctuation">,</span> render<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">evolve</span> <span class="token punctuation">(</span><span class="token keyword">get</span><span class="token punctuation">,</span> split<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span> <span class="token operator">=</span> action\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'increment\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'asyncIncrement\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count <span class="token operator">+</span> payload<span class="token punctuation">,</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span>atom<span class="token punctuation">,</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'change\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> details<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    action<span class="token punctuation">:</span> details<span class="token punctuation">.</span>action<span class="token punctuation">,</span>\n    state<span class="token punctuation">:</span> atom<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\natom<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// -> { count: 5 }</span>\natom<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'increment\'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n  <span class="token comment">// -> { count: 10 }</span>\natom<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'asyncIncrement\'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n  <span class="token comment">// -> { count: 10, loading: true }</span>\natom<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'increment\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token comment">// -> { count: 12, loading: true }</span>\n  <span class="token comment">// -> 1 second later...</span>\n  <span class="token comment">// -> { count: 15, loading: false }</span>\n</code></pre>\n      </div>',excerpt:"This is a guide explaining how to think in Tiny Atom. This guide does not assume any previous understanding of state management approachesâ€¦",timeToRead:1,frontmatter:{title:"Basics"},parent:{__typename:"File",relativePath:"basics.md"}}},pathContext:{slug:"/basics/"}}}});
//# sourceMappingURL=path---basics-af0f98c4d163eba56b38.js.map