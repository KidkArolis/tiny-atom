{"version":3,"sources":["webpack:///path---using-with-immer-902c55ec30ca57cb35bf.js","webpack:///./.cache/json/using-with-immer.json"],"names":["webpackJsonp","348","module","exports","data","markdownRemark","html","excerpt","timeToRead","frontmatter","title","parent","__typename","relativePath","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,myMAA2uMC,QAAA,wIAAAC,WAAA,EAAAC,aAAkeC,MAAA,oBAA2BC,QAAWC,WAAA,OAAAC,aAAA,yBAA2DC,aAAgBC,KAAA","file":"path---using-with-immer-902c55ec30ca57cb35bf.js","sourcesContent":["webpackJsonp([118282543031498],{\n\n/***/ 348:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><strong>Tiny Atom</strong> works best when you don’t mutate your state objects and instead swap your state with a fresh copy.</p>\\n<p>By default, <strong>Tiny Atom</strong> shallowly clones and merges state updates into the existing state without mutating the previous state. To perform more complicated state updates, libraries such as <a href=\\\"/using-with-zaphod\\\">Zaphod</a> can be very helpful.</p>\\n<p>Another really neat alternative to updating your state without mutating is enabled by a library called <a href=\\\"https://github.com/mweststrate/immer\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">immer</a>. Immer is using Proxies to keep track of changes you’re making to the objects and then returns an efficiently cloned copy.</p>\\n<p>Let’s look at how you’d use it with tiny-atom.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> immer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'immer'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> createAtom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'tiny-atom'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> actions <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">fetchItem</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> id <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// using immer api! it's a callback where you can</span>\\n    <span class=\\\"token comment\\\">// mutate the state with regular js mutations</span>\\n    <span class=\\\"token comment\\\">// without actually mutating the original object</span>\\n    <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      state<span class=\\\"token punctuation\\\">.</span>loading <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`/items/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token comment\\\">// immer makes it convenient to make multiple,</span>\\n      <span class=\\\"token comment\\\">// deep changes to your state</span>\\n      <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        state<span class=\\\"token punctuation\\\">.</span>loading <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n        state<span class=\\\"token punctuation\\\">.</span>entities<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> item\\n        state<span class=\\\"token punctuation\\\">.</span>feed<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">err</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        state<span class=\\\"token punctuation\\\">.</span>loading <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n        state<span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Fetching failed'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// immer's signature matches that of atom's merge option</span>\\n<span class=\\\"token keyword\\\">const</span> atom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAtom</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> actions <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> merge<span class=\\\"token punctuation\\\">:</span> immer <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\natom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetchItems'</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\",\"excerpt\":\"Tiny Atom  works best when you don’t mutate your state objects and instead swap your state with a fresh copy. By default,  Tiny Atom…\",\"timeToRead\":1,\"frontmatter\":{\"title\":\"Using with immer\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"using-with-immer.md\"}}},\"pathContext\":{\"slug\":\"/using-with-immer/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---using-with-immer-902c55ec30ca57cb35bf.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><strong>Tiny Atom</strong> works best when you don’t mutate your state objects and instead swap your state with a fresh copy.</p>\\n<p>By default, <strong>Tiny Atom</strong> shallowly clones and merges state updates into the existing state without mutating the previous state. To perform more complicated state updates, libraries such as <a href=\\\"/using-with-zaphod\\\">Zaphod</a> can be very helpful.</p>\\n<p>Another really neat alternative to updating your state without mutating is enabled by a library called <a href=\\\"https://github.com/mweststrate/immer\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">immer</a>. Immer is using Proxies to keep track of changes you’re making to the objects and then returns an efficiently cloned copy.</p>\\n<p>Let’s look at how you’d use it with tiny-atom.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> immer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'immer'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> createAtom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'tiny-atom'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> actions <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">fetchItem</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> id <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// using immer api! it's a callback where you can</span>\\n    <span class=\\\"token comment\\\">// mutate the state with regular js mutations</span>\\n    <span class=\\\"token comment\\\">// without actually mutating the original object</span>\\n    <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      state<span class=\\\"token punctuation\\\">.</span>loading <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`/items/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token comment\\\">// immer makes it convenient to make multiple,</span>\\n      <span class=\\\"token comment\\\">// deep changes to your state</span>\\n      <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        state<span class=\\\"token punctuation\\\">.</span>loading <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n        state<span class=\\\"token punctuation\\\">.</span>entities<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> item\\n        state<span class=\\\"token punctuation\\\">.</span>feed<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">err</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        state<span class=\\\"token punctuation\\\">.</span>loading <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n        state<span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Fetching failed'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// immer's signature matches that of atom's merge option</span>\\n<span class=\\\"token keyword\\\">const</span> atom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAtom</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> actions <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> merge<span class=\\\"token punctuation\\\">:</span> immer <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\natom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetchItems'</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\",\"excerpt\":\"Tiny Atom  works best when you don’t mutate your state objects and instead swap your state with a fresh copy. By default,  Tiny Atom…\",\"timeToRead\":1,\"frontmatter\":{\"title\":\"Using with immer\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"using-with-immer.md\"}}},\"pathContext\":{\"slug\":\"/using-with-immer/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/using-with-immer.json\n// module id = 348\n// module chunks = 118282543031498"],"sourceRoot":""}