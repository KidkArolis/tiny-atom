{"version":3,"sources":["webpack:///path---using-with-immutable-5f9ed5648ee6120b0b7c.js","webpack:///./.cache/json/using-with-immutable.json"],"names":["webpackJsonp","519","module","exports","data","markdownRemark","html","excerpt","timeToRead","frontmatter","title","parent","__typename","relativePath","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8/KAA2rLC,QAAA,+IAAAC,WAAA,EAAAC,aAA6NC,MAAA,2BAAkCC,QAAWC,WAAA,OAAAC,aAAA,6BAA+DC,aAAgBC,KAAA","file":"path---using-with-immutable-5f9ed5648ee6120b0b7c.js","sourcesContent":["webpackJsonp([242285354020291],{\n\n/***/ 519:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><strong>Tiny Atom</strong> works best when you don’t mutate your state objects and instead update everything in an immutable manner.</p>\\n<p>By default, <strong>Tiny Atom</strong> shallowly clones and merges state updates into the existing state without mutating the previous state. To perform more complicated state updates, libraries such as <a href=\\\"/using-with-zaphod\\\">Zaphod</a> can be very helpful.</p>\\n<p>Another way to actually force immutability in your <code>atom</code> is to use an immutable data structure library such as <a href=\\\"https://facebook.github.io/immutable-js/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Immutable.js</a>. For this to work with <strong>Tiny Atom</strong> you’ll have to pass a custom <code>initialState</code> and a custom <code>merge</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Map <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'immutable'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> createAtom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'tiny-atom'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">merge</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> state<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>update<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> atom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAtom</span><span class=\\\"token punctuation\\\">(</span>initialState<span class=\\\"token punctuation\\\">,</span> evolve<span class=\\\"token punctuation\\\">,</span> render<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> merge <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">evolve</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">,</span> split<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> count <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'count'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> update <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span>update<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'decrement'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// or simply</span>\\n    <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'count'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span>nextState<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"excerpt\":\"Tiny Atom  works best when you don’t mutate your state objects and instead update everything in an immutable manner. By default,  Tiny Atom…\",\"timeToRead\":1,\"frontmatter\":{\"title\":\"Using with Immutable.js\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"using-with-immutable.md\"}}},\"pathContext\":{\"slug\":\"/using-with-immutable/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---using-with-immutable-5f9ed5648ee6120b0b7c.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><strong>Tiny Atom</strong> works best when you don’t mutate your state objects and instead update everything in an immutable manner.</p>\\n<p>By default, <strong>Tiny Atom</strong> shallowly clones and merges state updates into the existing state without mutating the previous state. To perform more complicated state updates, libraries such as <a href=\\\"/using-with-zaphod\\\">Zaphod</a> can be very helpful.</p>\\n<p>Another way to actually force immutability in your <code>atom</code> is to use an immutable data structure library such as <a href=\\\"https://facebook.github.io/immutable-js/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Immutable.js</a>. For this to work with <strong>Tiny Atom</strong> you’ll have to pass a custom <code>initialState</code> and a custom <code>merge</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Map <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'immutable'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> createAtom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'tiny-atom'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">merge</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> state<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>update<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> atom <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAtom</span><span class=\\\"token punctuation\\\">(</span>initialState<span class=\\\"token punctuation\\\">,</span> evolve<span class=\\\"token punctuation\\\">,</span> render<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> merge <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">evolve</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">,</span> split<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> count <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'count'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> update <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span>update<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'decrement'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// or simply</span>\\n    <span class=\\\"token keyword\\\">const</span> nextState <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'count'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span>nextState<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"excerpt\":\"Tiny Atom  works best when you don’t mutate your state objects and instead update everything in an immutable manner. By default,  Tiny Atom…\",\"timeToRead\":1,\"frontmatter\":{\"title\":\"Using with Immutable.js\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"using-with-immutable.md\"}}},\"pathContext\":{\"slug\":\"/using-with-immutable/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/using-with-immutable.json\n// module id = 519\n// module chunks = 242285354020291"],"sourceRoot":""}